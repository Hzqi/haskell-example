#+STARTUP: showall
* HASKELL 最佳实践

本人在使用过程中，会整理出haskell的学习资料，以便大家更好的学习。
欢迎大家fork并提交PR!

** HASKELL :> 电子书
  - [新手入门-兴趣] Learn You a Haskell for Great Good! A Beginner's Guide 
  #+BEGIN_QUOTE
    此书过于基础，适合函数式概念入门，不具备工程开发能力，适合haskell零基础爱好者兴趣培养
  #+END_QUOTE
  - [新手入门-进阶] Haskell Programming from first principle
  #+BEGIN_QUOTE
    此书把简单的东西讲得太细致，能提供较好的haskell基础知识, 适合haskell专业开发者入门指引
  #+END_QUOTE
  - [基础开发] Real World Haskell [http://book.realworldhaskell.org/read/]
  #+BEGIN_QUOTE
    此书具备一定难度，且知识面较为全面，适合具有haskell基础的人员深入理解学习
  #+END_QUOTE
  - [专业技能] parallel and concurrency programming in haskell
  #+BEGIN_QUOTE
    此书由haskell核心库高并发专家编写，知识体系非常完整，讲解得深入浅出
  #+END_QUOTE

** HASKELL :>  技术文章
  + Monad连接器:
    - 博客: https://www.jianshu.com/p/e0f710b3cd4c
  + CSP技术
    - 库源码学习: https://www.jianshu.com/p/694e95dc390c
  + TypeClass :
    - 视频: https://www.bilibili.com/video/av40042989
  + 类型系统:
    - 博客[未完成]：https://www.jianshu.com/p/ae3ed9c4870b
  + Template Haskell
    - 博客: https://markkarpov.com/tutorial/th.html
    - 博客: https://wiki.haskell.org/Template_Haskell
    - 库源码学习: [persistent, aeson, lens]
  + FRP技术
    - 理论: https://blog.qfpl.io/projects/reflex/
    - 实战: https://github.com/hansroland/reflex-dom-inbits/blob/master/tutorial.md
  + 实时流技术Conduit
    - 源码分析: https://www.jianshu.com/p/65e75b0edbaa
  + 复合解析技术parsec
    - 源码分析: https://www.jianshu.com/p/595983904a57
  + 高并发STM
    - 源码分析: https://www.jianshu.com/p/cd2514ee27bc
  + 全栈开发[servant+reflex]
    - https://jappieklooster.nl/fullstack-haskell-reflex-and-servant.html
    - https://jappieklooster.nl/authentication-in-reflex-servant.html

** HASKELL :> 开发工具
  emacs dante :> [nix + cabal] <> [obelisk]
  - emacs dante [https://github.com/jyp/dante]
  - nix + cabal 配置 [https://github.com/Gabriel439/haskell-nix]
  - obelisk [https://github.com/obsidiansystems/obelisk]

** HASKELL :> 全栈开发
  - C FFI [https://github.com/ghc/ghc]
  #+BEGIN_QUOTE
    ghc: 原生大本营, 非常好玩
  #+END_QUOTE
  - JS FFI [https://github.com/ghcjs/ghcjs]
  #+BEGIN_QUOTE
    ghcjs: 有着强大的FRP支撑, 以reflex最为知名, 大部分项目需要配合nix使用
  #+END_QUOTE
  - JVM FFI [https://github.com/eta-lang]
  #+BEGIN_QUOTE
    eta-lang: 
    当前不支持GHC 8, 使用NIX会比较麻烦; 
    对于Maybe类型的nullable object尚不支持; 
    使用过程中须使用progurad减少文件size，编译过程较慢; 
    HDBC及其底层的数据库尚未完全支持，使用友好度不够
  #+END_QUOTE

** HASKELL :> 知名工具
  - pandoc [https://github.com/jgm/pandoc]
  #+BEGIN_QUOTE
    进行任意文档格式转换
  #+END_QUOTE
  - gitit [https://github.com/jgm/gitit]
  #+BEGIN_QUOTE
    轻松一键安装，零依赖: nix-env -f '<nixpkgs>' -iA haskellPackages.gitit  
  #+END_QUOTE
  - Haxl [https://github.com/facebook/Haxl]
  #+BEGIN_QUOTE
    facebook出品，用于大规模反垃圾邮件策略
  #+END_QUOTE
  - queryparser [https://github.com/uber/queryparser]
  #+BEGIN_QUOTE
    uber出品, 数据仓库血缘分析工具, 支持vertica|HIVE|presto
  #+END_QUOTE
  - postgREST [https://github.com/PostgREST/postgrest]
  #+BEGIN_QUOTE
    非常厉害的postgresql restful api服务
  #+END_QUOTE
  - postgresql2websocket [https://github.com/frafra/postgresql2websocket]
  #+BEGIN_QUOTE
    通过postgresql的notify接口建立socket实时推送服务
  #+END_QUOTE
  - hnix [https://github.com/haskell-nix/hnix]
  #+BEGIN_QUOTE
    nix的haskell实现版本，方便用于测试集成
  #+END_QUOTE
  - graphql-engine/server [https://github.com/hasura/graphql-engine/tree/master/server]
  #+BEGIN_QUOTE
    GraphQL on postgresql横空出世  
  #+END_QUOTE
  - cardano [https://github.com/input-output-hk/cardano-sl]
  #+BEGIN_QUOTE
    haskell实现的区块链项目
  #+END_QUOTE  
  - dhall [https://github.com/dhall-lang/dhall-haskell]
  #+BEGIN_QUOTE
    haskell实现的配置编程语言
  #+END_QUOTE
  - haskell-webshell [https://github.com/lehins/haskell-webshell]
  #+BEGIN_QUOTE
    通用网页实现的shell终端
  #+END_QUOTE

** HASKELL :> 数据格式解析
  - JSON =: aeson
  #+BEGIN_QUOTE
    当前不支持非严格json解析，例如单引号或者key不含引号，可以改写低层库很方便实现
  #+END_QUOTE
  - YAML =: yaml
  #+BEGIN_QUOTE
    可以很容易与aeson集成
  #+END_QUOTE
  - CSV =: cassava
  - EXCEL =: xlsx
  #+BEGIN_QUOTE
    性能强悍，大量使用lens操作
  #+END_QUOTE

** HASKELL :> 通用格式解析器
  - parsec 
  #+BEGIN_QUOTE
    GHC核心自带解析器，性能较弱
  #+END_QUOTE
  - attoparsec
  #+BEGIN_QUOTE
    网络字节解析器，性能强悍，错误提示较差
  #+END_QUOTE
  - megaparsec
  #+BEGIN_QUOTE
    parsec的性能增强版本
  #+END_QUOTE

** HASKELL :> 前端开发
  - reflex 及 reflex-dom
  #+BEGIN_QUOTE
    FRP核心库
  #+END_QUOTE
  - reflex-semantic
  #+BEGIN_QUOTE
    reflex UI库
  #+END_QUOTE
  - obelisk
  #+BEGIN_QUOTE
    reflex构建工具与开发框架
  #+END_QUOTE

** HASKELL :> WEB开发框架
  - servant-server
  #+BEGIN_QUOTE
    restful服务开发, 对xml的支持需要自己添加
  #+END_QUOTE
  - servant-auth
  #+BEGIN_QUOTE
    JWT及cookie验证
  #+END_QUOTE
  - servant-client
  #+BEGIN_QUOTE
    生成后端api调用代码
  #+END_QUOTE
  - servant-reflex
  #+BEGIN_QUOTE
    生成reflex前端api调用代码
  #+END_QUOTE
  - servant-swagger
  #+BEGIN_QUOTE
    servant swagger文档库
  #+END_QUOTE

** HASKELL :> 数据库访问库
  _ postgresql =: postgresql-simple
  + mysql =: mysql-simple
  + SQL Server =: tds
  + oracle =: odpic-raw
  #+BEGIN_QUOTE
    oracle使用最简单的库, blob支持需要自己添加
  #+END_QUOTE
  + ORM & DSL 
    - persistent+Esqueleto
    - groundhog [https://github.com/lykahb/groundhog]
** HASKELL :> 字节编码库
  - base64-bytestring
  - utf8-bytestring
  - cryptonite
  #+BEGIN_QUOTE
    haskell业界标准加密库
  #+END_QUOTE

** HASKELL :> 数据处理框架
  - conduit 
  #+BEGIN_QUOTE
    单机史上最强实时处理技术
  #+END_QUOTE
  - lens
  #+BEGIN_QUOTE
    多层级数据遍历组合处理库
  #+END_QUOTE  

** HASKELL :> 大数据处理技术
  - hw-kafka-conduit
  #+BEGIN_QUOTE
    conduit在kafka平台上运行
  #+END_QUOTE
  - sparkle [https://github.com/tweag/sparkle]
  - eta-spark [https://github.com/typelead/eta-examples/tree/master/3-spark]

** HASKELL :> 高并行并发框架
  - parallel 并行库
  #+BEGIN_QUOTE
    快捷版本并行库
  #+END_QUOTE
  - monad-par 并行库
  #+BEGIN_QUOTE
    灵活定制版本并行库
  #+END_QUOTE
  - STM 
  #+BEGIN_QUOTE
    系统自带并发库
  #+END_QUOTE
  - distribute-process
  #+BEGIN_QUOTE
    分布式并发库
  #+END_QUOTE

** HASKELL :> 网络传输工具
  + SSH =: libssh2
  #+END_QUOTE
  + HTTP/HTTPS
    - http-client
    - http-client-tls

** HASKELL :> 运行时动态加载
  - hint
  #+BEGIN_QUOTE
    动态运行时加载
  #+END_QUOTE

** HASKELL :> 脚本工具
  - Haskell-Turtle-Library
  #+BEGIN_QUOTE
    简洁版脚本工具
  #+END_QUOTE
  - Shelly
  #+BEGIN_QUOTE
    灵活版脚本工具
  #+END_QUOTE
  
** HASKELL :>  其它常用库[等整理]
  - resourcet
  - mono-traversable
  - rio

